class Graph:
    def __init__(self, edgelist: list):
        self._adjlist = None
        self._valuelist = None

    def __len__(self):
        return len(self._valuelist)

    def add_edges(self, a, b):
        if a in self._adjlist:
            self._adjlist[a].append(b)
        else:
            self._adjlist[a] = [b]

    def add_vertex(self, a):
        self._adjlist[a] = []
        self._valuelist[a] = []

    def get_edges(self):
        return self._adjlist

    def get_vertex_value(self, v):
        return self._valuelist[v]

    def get_neighbours(self, v):
        return [neighbour for neighbour in self._adjlist[v]]

    def remove_edge(self, a, b):
        if a in self._adjlist:
            if b in self._adjlist[a]:
                self._adjlist[a].remove(b)
        if b in self._adjlist:
            if a in self._adjlist[b]:
                self._adjlist[b].remove(a)

    def remove_vertex(self, v):
        self._adjlist.pop(v)
        self._valuelist.pop(v)

    def set_vertex_value(self, v, x):
        self._valuelist[v] = x

    def get_vertices(self):
        return [vertice for vertice in self._valuelist]

class WeightedGraph:
    def __init__(self, start):
        self._weightlist = None #dict

    def get_weight(self, a, b):
        return self._weightlist[a][b]

    def set_weight(self, a, b, w):
        self._weightlist[a][b] = w

def dijkstra(graph, source, cost=lambda u,v: 1):
    pass

def visualize(graph, view='dot', name='mygraph', nodecolors={}, engine='dot'):
    pass
