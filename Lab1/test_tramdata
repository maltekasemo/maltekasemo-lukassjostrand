import unittest
from tramdata import *

TRAM_FILE = 'tramnetwork.json'

class TestTramData(unittest.TestCase):

    def setUp(self):
        with open(TRAM_FILE) as trams:
            tramdict = json.loads(trams.read())
            self.stopdict = tramdict['stops']
            self.linedict = tramdict['lines']
            self.all = tramdict

    def test_stops_exist(self):
        stopset = {stop for line in self.linedict for stop in self.linedict[line]}
        for stop in stopset:
            self.assertIn(stop, self.stopdict, msg = stop + ' not in stopdict')

    def test_all_tram_lines_included(self):
        with open('tramlines.tsv', 'r') as data:
            rows = csv.reader(data, delimiter = "\t")
            for line in rows:
                if line:
                    if line[0][0].isdigit():
                        if line[0].split(':')[0] not in self.linedict:
                            self.assertIn(line[0][0], self.linedict, msg=line[0][0] + ' not in linedict')

    def test_all_stops_in_line(self):
        with open('tramlines.tsv', 'r') as data:
            rows = csv.reader(data, delimiter = "\t")
            for line in rows:
                if line:
                    if line[0][0].isdigit():
                        line_nr = line[0].split(':')[0]
                    else:
                        stop = line[0].rsplit(" ", 1)[0].rstrip()
                        if stop in self.linedict[line_nr]:
                            pass
                        else:
                            self.assertIn(stop, self.linedict[line_nr], msg=stop + ' not in ' + line_nr)

    def test_all_distances_less_than_20_km(self):
        for stop1 in self.stopdict:
            for stop2 in self.stopdict:
                distance = distance_between_stops(self.stopdict, stop1, stop2)
                if distance > 20:
                    self.assertIn([stop1, stop2], self.stopdict, msg='distance from ' +stop1+ 'to' +stop2+ ' greater than 20km')


    def test_if_time_from_a_to_b_same_as_time_from_b_to_a(self):
        for line in self.linedict:
            for i in range(len(self.linedict[line]) - 1):
                for y in range(i, len(self.linedict[line])):
                    if times_between_stops(self.all, line, self.linedict[line][i], self.linedict[line][y]) \
                            != times_between_stops(self.all, line, self.linedict[line][y], self.linedict[line][i]):
                        self.assertIn([self.linedict[line][i], self.linedict[line][y]], self.stopdict, msg='time from ' + self.linedict[line][i]
                                    +'to ' +self.linedict[line][y]+ ' not same as reversed')

if __name__ == '__main__':
    unittest.main()
