from math import sin, cos, sqrt, atan2, pi

class Queries:
    @classmethod
    def lines_via_stop(cls, somedict, stop):
        return [line for line in somedict if stop in somedict[line]]

    @classmethod
    def lines_between_stops(cls, somedict, stop1, stop2):
        lines = [line for line in somedict if stop1 in somedict[line] and stop2 in somedict[line]]
        if not lines:
            return (f"Det finns inga linjer mellan {stop1} och {stop2}")
        else:
            return lines

    @classmethod
        def times_between_stops(cls, somedict1, somedict2, line, stop1, stop2):
        stations_of_a_line = somedict1[line]

        if stop1 in stations_of_a_line and stop2 in stations_of_a_line:
            start_index = stations_of_a_line.index(stop1)
            end_index = stations_of_a_line.index(stop2)
            stations_between_stops = []
            for i in range(end_index - start_index + 1):
                stations_between_stops.append(stations_of_a_line[i+start_index])

        time = 0
        times =[]
        i = 1
        try:
            for stop in stations_between_stops:
                time += somedict2[stop][stations_between_stops[i]]
                times.append(somedict2[stop][stations_between_stops[i]])
                i+=1
        except IndexError:
            return time

    @classmethod
    def distance_between_stops(cls, somedict, stop1, stop2):
        lon1 = somedict[stop1]["lon"] * pi/180
        lon2 = somedict[stop2]["lon"] * pi/180
        lat1 = somedict[stop1]["lat"] * pi/180
        lat2 = somedict[stop2]["lat"] * pi/180

        R = 6373.0

        lon_diff = abs(lon1 - lon2)
        lat_diff = abs(lat1 - lat2)

        a = (sin(lat_diff / 2)) ** 2 + cos(lon1) * cos(lon2) * (sin(lon_diff / 2)) ** 2
        c = 2 * atan2(sqrt(a), sqrt(1 - a))
        distance = R * c

        return distance
