w1thermsensor.errors.SensorNotReadyError: Sensor 082254970c65 is not yet ready to read temperature

dwc_otg.lpm_enable=0 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait quiet splash plymouth.ignore-serial-consoles

console=serial0,115200 console=tty1 root=PARTUUID=9fc03cbf-02 rootfstype=ext4 fsck.repair=yes rootwait quiet splash plymouth.ignore-serial-consoles




import serial
import time
import string
import pynmea2

while True:
	port="/dev/ttyAMA0"
	ser=serial.Serial(port, baudrate=9600, timeout=0.5)
	dataout = pynmea2.NMEAStreamReader()
	newdata=ser.readline()

	if newdata[0:6] == "$GPRMC":
		newmsg=pynmea2.parse(newdata)
		lat=newmsg.latitude
		lng=newmsg.longitude
		gps = "Latitude=" + str(lat) + "and Longitude=" + str(lng)
		print(gps)


import time
import json
import os
from w1thermsensor import W1ThermSensor
import serial
import pynmea2

sensor = W1ThermSensor()
file_path = os.path.join(os.environ['HOME'], 'Desktop', 'data.json')

while True:
    port = "/dev/ttyAMA0"
    ser = serial.Serial(port, baudrate=9600, timeout=0.5)
    dataout = pynmea2.NMEAStreamReader()
    newdata = ser.readline()
    newdata_str = newdata.decode('ISO-8859-1') 
    print(newdata_str)
    


import serial
import pynmea2

def port_setup(port):
    ser = serial.Serial(port, baudrate=9600, timeout=2)
    return ser

def parseGPSdata(ser):
        keywords = ["$GPRMC","$GPGGA"]
        gps_data = ser.readline()
        gps_data = gps_data.decode("utf-8")  # transform data into plain string

        if len(gps_data) > 5:  # Check to see if the GPS gave any useful data
            if gps_data[0:6] in keywords:   # Check t see if the message code
                gps_msg = pynmea2.parse(gps_data)
                lat = gps_msg.latitude
                lng = gps_msg.longitude
                return (lat,lng)
            else:
                return None
        else:
            return None

if __name__ == "__main__":

    # access serial port
    gps_port = "/dev/serial0"
    ser = port_setup(gps_port)

    # Print out GPS cordinates
    print("GPS coordinate Stream:")
    while True:
        try:
            gps_coords = parseGPSdata(ser)
            if gps_coords is None:  # if no valid data was received
                print("No Data")
            else:
                print(f"latitude: {gps_coords[0]}, longitude: {gps_coords[1]}")

        except serial.SerialException as e:  # catch any serial communication errors
            print(f"\nERROR: {e}")
            print("... reconnecting to serial\n")
            ser = port_setup()

        except KeyboardInterrupt as e:  # Catch when user hits Ctrl-C and end program
            print("--- Program shutting down ---")
            break
	    
	    
	    
	    
	    
import time
from w1thermsensor import W1ThermSensor
from w1thermsensor import errors
import csv
import urllib.request
from email.message import EmailMessage
import ssl
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import os



def check_connection(host='http://google.com'):
    try:
        urllib.request.urlopen(host) #Python 3.x
        print('Connected!')
        return True
    except:
        print('Offline!')
        return False # test

def main_loop(sensor):
    
    time.sleep(30)
    if check_connection():
        send_mail()
    else:
        collect_data(sensor)

def send_mail():
    filename = '/home/group1/Desktop/data.csv'
    attachment = open(filename, 'rb')
    attachment_package = MIMEBase('application', 'octet-stream')
    attachment_package.set_payload((attachment).read())
    encoders.encode_base64(attachment_package)
    attachment_package.add_header('Content-Disposition', 'attachment; filename = ' + filename)

    email_sender = 'oceansentinel.user@gmail.com'
    email_password = 'shrnzgkefspeutnp'
    email_receiver = 'oceansentinel.data@gmail.com'

    subject = 'Data fr√•n Python'
    body = 'Daniel har en klitoris under sin pung'

    em = MIMEMultipart()
    em['From'] = email_sender
    em['To'] = email_receiver
    em['Subject'] = subject

    em.attach(MIMEText(body, 'plain'))
    em.attach(attachment_package)

    context = ssl.create_default_context()

    with smtplib.SMTP_SSL('smtp.gmail.com', 465, context=context) as smtp:
        smtp.login(email_sender, email_password)
        smtp.sendmail(email_sender, email_receiver, em.as_string())

    os.remove('/home/group1/Desktop/data.csv')

    print('Email sent!')

def collect_data(sensor):
    time.sleep(5)
    
    while True:
        port="/dev/ttyAMA0"
        ser=serial.Serial(port, baudrate=9600, timeout=0.5)
        dataout = pynmea2.NMEAStreamReader()
        newdata=ser.readline()
        newdata_str = newdata.decode('ISO-8859-1') 
        temp = sensor.get_temperature()
        timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
        
        if newdata_str[0:6] == "$GPRMC":
			newmsg=pynmea2.parse(newdata_str)
			lat=newmsg.latitude
			lng=newmsg.longitude
			with open('/home/group1/Desktop/data.csv', 'a', newline = '') as file:
				writer = csv.writer(file)
				data = [temp, lat, lon, timestamp]
				writer.writerow(data)
try:
	sensor = W1ThermSensor()
	main_loop(sensor)
except errors.SensorNotReadyError:
	print('Sensor is not ready')
	pass

except errors.NoSensorFoundError:
	print('Sensor is not found')
	pass
